#*************************************************************************
#Copyright (c) 2014 - Maven Medical
#************************
#AUTHOR:
__author__='Yuki Uchino'
#************************
#DESCRIPTION:
#
#
#
#
#************************
#ASSUMES:
#************************
#SIDE EFFECTS:
#************************
#LAST MODIFIED FOR JIRA ISSUE:
#*************************************************************************
import unittest
import asyncio
import maven_config as MC
import maven_logging as ML
import utils.streaming.stream_processor as SP
from utils.database.database import AsyncConnectionPool
import app.backend.evaluators.composition_evaluator as CE
import pickle


class TestCompositionEvaluator(unittest.TestCase):

    def setUp(self):
        with open("/home/devel/maven/clientApp/webservice/test_message_from_ehr") as f:
            r = f.readlines()
            self.composition = VistaParser().create_composition(r[11])
        self.composition_evaluator = CE.CompositionEvaluator(testhandler)
        self.loop = asyncio.get_event_loop()
        self.composition_evaluator.schedule(self.loop)

    def test_cost_evaluator(self):
        @asyncio.coroutine
        def go():
            self.composition_evaluator._add_alerts_section(self.composition)
            yield from self.composition_evaluator.evaluate_encounter_cost(composition=self.composition)
        self.loop.run_until_complete(go())

        enc_ord_summary_section = self.composition.get_section_by_coding("maven", "enc_ord_sum")
        self.assertEqual(enc_ord_summary_section.content, [('76370', 'CPT4'), ('2', 'maven'), ('3', 'maven')])

        enc_cost_alert = self.composition.get_alerts(type="cost")
        self.assertEqual(enc_cost_alert['cost_details'], [['IMMUNOGLOBULINS', 20], ['CEFIXIME TAB ', 520], ['CT SINUS COMPLETE W/O CONTRAST', 810]])

    def test_duplicate_order(self):
        @asyncio.coroutine
        def go():
            #TODO - the duplicate orders functionality relies on a section that is added during cost evaluation
            #TODO - which we need to decouple (thats why the evaluate_encounter_cost method is run before below)
            self.composition_evaluator._add_alerts_section(self.composition)
            yield from self.composition_evaluator.evaluate_encounter_cost(composition=self.composition)
            yield from self.composition_evaluator.evaluate_recent_results(composition=self.composition)
        self.loop.run_until_complete(go())

        ord_detail = self.composition.get_encounter_order_detail_by_coding(code="3", code_system="maven")
        check_observation = (ord_detail.relatedItem[0].name, ord_detail.relatedItem[0].valueQuantity.value, ord_detail.relatedItem[0].valueQuantity.units)
        self.assertEqual(check_observation, ('Hemoglobin A1c', 7.4, '%'))

    def test_alternative_meds(self):
        pass

    def test_rule_engine(self):
        pass


testhandler = 'testmsghandler'
incomingtomavenmessagehandler = 'receiver socket'


class IncomingMessageHandler(SP.StreamProcessor):

    def __init__(self, configname):
        SP.StreamProcessor.__init__(self, configname)
        self.master_list = ['', '', '', '', '']
        self.object_manager = []

    @asyncio.coroutine
    def read_object(self, obj, key2):
        # obj_list = json.loads(obj.decode())
        obj_list = pickle.loads(obj)
        composition = obj_list[0]
        key1 = obj_list[1]
        ML.DEBUG(key1)
        # composition = api.Composition().create_composition_from_json(json_composition)
        composition.write_key = [key1, key2]
        self.write_object(composition, writer_key="CostEval")


MavenConfig = {
    testhandler:
    {
        SP.CONFIG_READERTYPE: SP.CONFIGVALUE_EXPLICIT,
        SP.CONFIG_READERNAME: testhandler+".Reader",
        SP.CONFIG_WRITERTYPE: SP.CONFIGVALUE_EXPLICIT,
        SP.CONFIG_WRITERNAME: [testhandler+".Writer", testhandler+".Writer2"],
        SP.CONFIG_PARSERTYPE: SP.CONFIGVALUE_IDENTITYPARSER,

    },
    testhandler+".Reader":
    {
        SP.CONFIG_HOST:'localhost',
        SP.CONFIG_QUEUE:'aggregator_work_queue',
        SP.CONFIG_EXCHANGE:'maven_exchange',
        SP.CONFIG_KEY:'aggregate',
    },

    testhandler+".Writer":
    {
        SP.CONFIG_HOST:'localhost',
        SP.CONFIG_QUEUE:'aggregator_work_queue',
        SP.CONFIG_EXCHANGE:'maven_exchange',
        SP.CONFIG_KEY:'aggregate',
        SP.CONFIG_WRITERKEY:'aggregate',
    },

    testhandler+".Writer2":
    {
        SP.CONFIG_HOST:'localhost',
        SP.CONFIG_QUEUE:'logger_work_queue',
        SP.CONFIG_EXCHANGE:'maven_exchange',
        SP.CONFIG_KEY:'logging',
        SP.CONFIG_WRITERKEY:'logging',
    },
    'EvaluatorConnectionPool': {
        AsyncConnectionPool.CONFIG_CONNECTION_STRING: MC.dbconnection,
        AsyncConnectionPool.CONFIG_MIN_CONNECTIONS: 2,
        AsyncConnectionPool.CONFIG_MAX_CONNECTIONS: 4
    },
    incomingtomavenmessagehandler + ".Writer":
        {
            SP.CONFIG_HOST: 'localhost',
            SP.CONFIG_QUEUE: 'incoming_cost_evaluator_work_queue',
            SP.CONFIG_EXCHANGE: 'maven_exchange',
            SP.CONFIG_KEY: 'incomingcost'
        },
        incomingtomavenmessagehandler + ".Writer_CostEval":
        {
            SP.CONFIG_HOST: 'localhost',
            SP.CONFIG_QUEUE: 'incoming_cost_evaluator_work_queue',
            SP.CONFIG_EXCHANGE: 'maven_exchange',
            SP.CONFIG_KEY: 'incomingcosteval',
            SP.CONFIG_WRITERKEY: 'CostEval'
        },
}



MC.MavenConfig = MavenConfig

if __name__ == '__main__':
    TestCompositionEvaluator()