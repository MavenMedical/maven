package mavenrulewriter;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.json.JSONArray;
import org.json.JSONObject;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Efisch
 */
public class MavenRuleFrontend extends javax.swing.JFrame {

    private String editingDB = "none";
    private Rule curRule;
   ArrayList<String> deleteList = new ArrayList<String>();
    /**
     * Creates new form MavenRuleFrontend
     */
    public MavenRuleFrontend() {
        initComponents();
    }
    
    private RuleDBModel myModel = new RuleDBModel(this);
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        RuleList = new javax.swing.JList();
        EditRuleButton = new javax.swing.JButton();
        CreateButton = new javax.swing.JButton();
        RuleNameField = new javax.swing.JTextField();
        EditorPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AgeMax = new javax.swing.JTextField();
        AgeMin = new javax.swing.JTextField();
        TriggerTypeLabel = new javax.swing.JLabel();
        TriggerCode = new javax.swing.JTextField();
        TriggerTypeBox = new javax.swing.JComboBox();
        whatever = new javax.swing.JLabel();
        DetailsPanel = new javax.swing.JPanel();
        DetailsList = new javax.swing.JScrollPane();
        DetailList = new javax.swing.JList();
        RemoveDetailButton = new javax.swing.JButton();
        EncounterProcedureConditionButton = new javax.swing.JButton();
        HistoricProcedureConditionButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        EncounterProbListButton = new javax.swing.JButton();
        LabResult = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SexList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        CommentField = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        DBConnButton = new javax.swing.JButton();
        DBNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        DeleteRuleButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1400, 750));
        setMinimumSize(new java.awt.Dimension(1400, 750));

        RuleList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        RuleList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RuleListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(RuleList);

        EditRuleButton.setText("Edit Rule");
        EditRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditRuleButtonActionPerformed(evt);
            }
        });

        CreateButton.setText("Create Rule");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        RuleNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RuleNameFieldActionPerformed(evt);
            }
        });

        EditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Editing Rule"));

        jLabel3.setText("Rule Only Applies to Patients Above Age:");

        jLabel4.setText("Rule Only Applies to Patients Below Age:");

        jLabel5.setText("Rule Only Applies to Patients Who Are:");

        DocumentListener n = new DocumentListener(){
            public void insertUpdate(DocumentEvent e) {
                curRule.setMaxAge(AgeMax.getText());

            }
            public void removeUpdate(DocumentEvent e) {
                curRule.setMaxAge(AgeMax.getText());

            }
            public void changedUpdate(DocumentEvent e) {}
        };
        AgeMax.getDocument().addDocumentListener(n);

        n = new DocumentListener(){
            public void insertUpdate(DocumentEvent e) {
                curRule.setMinAge(AgeMin.getText());

            }
            public void removeUpdate(DocumentEvent e) {
                curRule.setMinAge(AgeMin.getText());
            }
            public void changedUpdate(DocumentEvent e) {}
        };
        AgeMin.getDocument().addDocumentListener(n);

        TriggerTypeLabel.setText("Rule is Used When Following Drug is Perscribed:");

        TriggerTypeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Drug Rx", "Procedure" }));
        TriggerTypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TriggerTypeBoxActionPerformed(evt);
            }
        });

        whatever.setText("Does This Rule Evaluate a Drug Prescription or Ordered Procedure?");

        DetailsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DetailList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DetailList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditOnDoubleClick(evt);
            }
        });
        DetailsList.setViewportView(DetailList);

        DetailsPanel.add(DetailsList, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 1040, 270));

        RemoveDetailButton.setText("Remove Criterion");
        RemoveDetailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveDetailButtonActionPerformed(evt);
            }
        });
        DetailsPanel.add(RemoveDetailButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 350, 220, -1));

        EncounterProcedureConditionButton.setText("Add Encounter Procedure Criterion");
        EncounterProcedureConditionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncounterProcedureConditionButtonActionPerformed(evt);
            }
        });
        DetailsPanel.add(EncounterProcedureConditionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 0, 260, -1));

        HistoricProcedureConditionButton.setText("Add Historic Procedure Criterion");
        HistoricProcedureConditionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoricProcedureConditionButtonActionPerformed(evt);
            }
        });
        DetailsPanel.add(HistoricProcedureConditionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 230, -1));

        EditButton.setText("Edit Criterion");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });
        DetailsPanel.add(EditButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 350, 270, -1));

        EncounterProbListButton.setText("Add Encounter Problem Criterion");
        EncounterProbListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncounterProbListButtonActionPerformed(evt);
            }
        });
        DetailsPanel.add(EncounterProbListButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, 250, -1));

        LabResult.setText("Add Lab Test Criterion");
        LabResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LabResultActionPerformed(evt);
            }
        });
        DetailsPanel.add(LabResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 0, 230, -1));

        SexList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Male", "Female" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        SexList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                SexListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(SexList);

        CommentField.setColumns(20);
        CommentField.setRows(5);
        jScrollPane3.setViewportView(CommentField);
        n = new DocumentListener(){
            public void insertUpdate(DocumentEvent e) {
                curRule.setComments(CommentField.getText());
            }
            public void removeUpdate(DocumentEvent e) {
                curRule.setComments(CommentField.getText());
            }
            public void changedUpdate(DocumentEvent e) {}
        };
        CommentField.getDocument().addDocumentListener(n);

        jLabel6.setText("Comments:");

        javax.swing.GroupLayout EditorPanelLayout = new javax.swing.GroupLayout(EditorPanel);
        EditorPanel.setLayout(EditorPanelLayout);
        EditorPanelLayout.setHorizontalGroup(
            EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditorPanelLayout.createSequentialGroup()
                .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(EditorPanelLayout.createSequentialGroup()
                            .addGap(7, 7, 7)
                            .addComponent(whatever)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(TriggerTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(EditorPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(TriggerTypeLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(TriggerCode, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, EditorPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EditorPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AgeMax, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EditorPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EditorPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AgeMin, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(EditorPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(DetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1053, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        EditorPanelLayout.setVerticalGroup(
            EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditorPanelLayout.createSequentialGroup()
                .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EditorPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TriggerTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(whatever))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TriggerCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TriggerTypeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EditorPanelLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3)))
                    .addGroup(EditorPanelLayout.createSequentialGroup()
                        .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(EditorPanelLayout.createSequentialGroup()
                                .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(AgeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(AgeMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        n = new DocumentListener(){
            public void insertUpdate(DocumentEvent e) {

                curRule.setTriggerCode(TriggerCode.getText());

            }
            public void removeUpdate(DocumentEvent e) {
                curRule.setTriggerCode(TriggerCode.getText());
            }
            public void changedUpdate(DocumentEvent e) {}
        };
        TriggerCode.getDocument().addDocumentListener(n);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Maven Rule Editor");

        DBConnButton.setText("Connect To DB");
        DBConnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBConnButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("DB Name:");

        UpdateButton.setText("Update DB to Model");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        DeleteRuleButton.setText("Delete Rule");
        DeleteRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRuleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(DBNameField))
                                        .addComponent(DBConnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(UpdateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(CreateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(RuleNameField)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(EditRuleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteRuleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(EditorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(355, 355, 355)
                        .addComponent(jLabel1)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(DBNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(DBConnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DeleteRuleButton)
                            .addComponent(EditRuleButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CreateButton)
                            .addComponent(RuleNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UpdateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EditorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        EditorPanel.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents
        public void addRule(Rule R){
        ListModel oldModel = RuleList.getModel();
        DefaultListModel newModel = new DefaultListModel(); 
        for (int c=0;c<oldModel.getSize();c++){
                newModel.addElement(oldModel.getElementAt(c));
        }
        newModel.addElement(R.getName());
        RuleList.setModel(newModel);
        selectRuleByName(R.getName());
    }
        
    public void removeRule(String R){
        ListModel oldModel = RuleList.getModel();
        DefaultListModel newModel = new DefaultListModel(); 
        for (int c=0;c<oldModel.getSize();c++){
            if (!oldModel.getElementAt((c)).toString().equals(R)){     
                newModel.addElement(oldModel.getElementAt(c));
            }
        }
        
        RuleList.setModel(newModel);
        
        
        
    }
    public void clearRuleModel(){
        RuleList.setModel(new DefaultListModel());
    }
    public void populateDetailsFromCurRule(){
        if (curRule == null){
            DetailList.setModel(new DefaultListModel());
        } else {
            DetailList.setModel(curRule.getDetailModel());
            AgeMax.setText(curRule.getMaxAge()+"");
            AgeMin.setText(curRule.getMinAge()+"");
            if (curRule.getTriggerType().equals("Drug Rx")){
                TriggerTypeBox.setSelectedIndex(0);
            } else {
                TriggerTypeBox.setSelectedIndex(1);
            }
            TriggerCode.setText(curRule.getTriggerCode());
            int[] select = {0,1};
             if (curRule.getSex().equals("MF"))
                SexList.setSelectedIndices(select);
             else if (curRule.getSex().equals("M"))
                SexList.setSelectedIndex(0);
             else if (curRule.getSex().equals("F"))
                SexList.setSelectedIndex(1);
             else 
                SexList.clearSelection();
             CommentField.setText(curRule.getComments());
            
        }
        
    }
    public void addDetail(Detail toAdd){
        DefaultListModel newModel = new DefaultListModel();
        
        ListModel oldModel = DetailList.getModel();
        for (int c=0;c<oldModel.getSize();c++){
                newModel.addElement(oldModel.getElementAt(c));
        }
         newModel.add(oldModel.getSize(), toAdd);
            
        
        DetailList.setModel(newModel);
        selectDetailByName(toAdd.name);
    }
    public void removeDetail(String name){
        
        
        ListModel oldModel = DetailList.getModel();
        DefaultListModel newModel = new DefaultListModel();
        for (int c=0;c<oldModel.getSize();c++){
            if (!((Detail)oldModel.getElementAt((c))).name.equals(name)){     
                newModel.addElement(oldModel.getElementAt(c));
            }
        }
        
        DetailList.setModel(newModel);
    }
    public void selectDetailByName(String name){
        
        for (int c=0;c<DetailList.getModel().getSize();c++){
                 if (((Detail)DetailList.getModel().getElementAt(c)).name.equals(name)){
                    DetailList.setSelectedIndex(c);
                    break;
               }
           } 
    
    
    }
    public void selectRuleByName(String name){
           for (int c=0;c<RuleList.getModel().getSize();c++){
               if (RuleList.getModel().getElementAt(c).toString().equals(name)){
                    RuleList.setSelectedIndex(c);
                    break;
               }
           } 
    }
    
     Detail getSelectedDetail(){
           return (Detail)DetailList.getSelectedValue();
    }
 
  
    
    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        if (myModel.containsID(RuleNameField.getText())){
                return;
        }
        myModel.addRule(RuleNameField.getText());
        curRule = myModel.getRuleByName(RuleNameField.getText());
        if (curRule!=null){
                EditorPanel.setVisible(true);
                        
        }
        this.populateDetailsFromCurRule();
        EditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Editing Rule " + RuleNameField.getText()));
        RuleNameField.setText("");
    }//GEN-LAST:event_CreateButtonActionPerformed

    private void RuleNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RuleNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RuleNameFieldActionPerformed

    private void DeleteRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRuleButtonActionPerformed
        if (RuleList.isSelectionEmpty()){
                return;
        }
        String toDelete = RuleList.getSelectedValue().toString();
        curRule=null;
        myModel.removeRule(toDelete);
        this.deleteList.add(toDelete);
        EditorPanel.setVisible(false);
        populateDetailsFromCurRule();
        RuleNameField.setText("");
    }//GEN-LAST:event_DeleteRuleButtonActionPerformed

    private void RemoveDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveDetailButtonActionPerformed
       curRule.removeDetailFromForm();
       
       
    }//GEN-LAST:event_RemoveDetailButtonActionPerformed

    private void EditRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditRuleButtonActionPerformed
        curRule = myModel.getRuleByName(RuleList.getSelectedValue().toString());
        if (curRule!=null){
            EditorPanel.setVisible(true);
        }
        this.populateDetailsFromCurRule();
        RuleNameField.setText("");
        EditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Editing Rule " + RuleList.getSelectedValue().toString()));
        
        
    }//GEN-LAST:event_EditRuleButtonActionPerformed

    private void EncounterProcedureConditionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncounterProcedureConditionButtonActionPerformed
           this.setEnabled(false);
           EncounterProcedure n = new EncounterProcedure(this);
           n.setVisible(true);
           
    }//GEN-LAST:event_EncounterProcedureConditionButtonActionPerformed

    private void HistoricProcedureConditionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistoricProcedureConditionButtonActionPerformed
        this.setEnabled(false);
        HistoricProcedure n = new HistoricProcedure(this);
        n.setVisible(true);
    }//GEN-LAST:event_HistoricProcedureConditionButtonActionPerformed

    private void TriggerTypeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TriggerTypeBoxActionPerformed
        if (TriggerTypeBox.getSelectedItem().toString().equals("Drug Rx")){
            TriggerTypeLabel.setText("Rule is Uswed When the Following Drug is Prescribed:");      
        } else {
            TriggerTypeLabel.setText("Rule is Used When the Following Procedure is Ordered:");
        }
        curRule.setTriggerType(TriggerTypeBox.getSelectedItem().toString());
    }//GEN-LAST:event_TriggerTypeBoxActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
       Detail toEdit = (Detail)DetailList.getSelectedValue();
       
       if (toEdit instanceof EncounterProcDetail){
           EncounterProcedure n = new EncounterProcedure(this, (EncounterProcDetail)toEdit);
           this.setEnabled(false);
           n.setVisible(true);
       }
       if (toEdit instanceof HistoricProcedureDetail){
           HistoricProcedure n = new HistoricProcedure(this, (HistoricProcedureDetail)toEdit);
           this.setEnabled(false);
           n.setVisible(true);
       }
       if (toEdit instanceof EncounterProbListDetail){
            this.setEnabled(false);
            EncounterProblemList n = new EncounterProblemList(this, (EncounterProbListDetail)toEdit);
            n.setVisible(true);
       }
       if (toEdit instanceof LabResultDetail){
           this.setEnabled(false);
           LabResult n = new LabResult(this, (LabResultDetail)toEdit);
           n.setVisible(true);
       }
    }//GEN-LAST:event_EditButtonActionPerformed

    private void EncounterProbListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncounterProbListButtonActionPerformed
        this.setEnabled(false);
        EncounterProblemList n = new EncounterProblemList(this);
        n.setVisible(true);
    }//GEN-LAST:event_EncounterProbListButtonActionPerformed

    private void SexListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_SexListValueChanged
       String result = "";
       if (SexList.isSelectedIndex(0)){
           result+="M";
          
       }
       if (SexList.isSelectedIndex(1)){
           result+="F";
           
       }
       
       curRule.setSex(result);
    }//GEN-LAST:event_SexListValueChanged

    private void DBConnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBConnButtonActionPerformed
        try {
            
            deleteList.clear();
            myModel.clear();
            org.postgresql.Driver PSQLDriver = new org.postgresql.Driver();
            String url = "jdbc:postgresql://23.251.149.125/maven";
            Properties props = new Properties();
            props.setProperty("user", "maven");
            props.setProperty("password", "mavendevel");
            
            Connection con = PSQLDriver.connect(url, props);
            Statement query = con.createStatement();
            System.out.append("logging: sending query SELECT * FROM Sleuth_Rule to " + url);
            ResultSet n = query.executeQuery("SELECT * FROM Sleuth_Rule");
            if (!n.isBeforeFirst())
                return;
            n.next();
            
                while (true){
                
                String cur = "name";
                String result = n.getString(cur);
              
                Rule newRule = new Rule(result, myModel);
                cur = "min_age";
                
                result = n.getString(cur);
                newRule.setMinAge(result);
                cur = "max_age";
                result = n.getString(cur);
                newRule.setMaxAge(result);
                cur = "sex";
                result = n.getString(cur);
                newRule.setSex(result);
                cur = "trigger_type";
                result = n.getString(cur);
                newRule.setTriggerType(result);
                cur = "trigger_code";
                result = n.getString(cur);
                newRule.setTriggerCode(result);
                
                cur = "comments";
                result = n.getString(cur);
                newRule.setComments(result);
                cur = "rule_details";
                result = n.getString(cur);
                
                JSONObject Details = new JSONObject(result);
                JSONArray each = Details.getJSONArray("details");
                for (int index = 0;index<each.length();index++){
                    JSONObject current = each.getJSONObject(index);
                    Detail newDet = Detail.generateDetailFromJSON(current);
                    newRule.addDetail(newDet);
                }
                myModel.addRule(newRule);
                if (n.isLast())
                    break;
                n.next();
            }
            this.editingDB ="maven/sleuth_rule";
        } catch (Exception ex) {
            Logger.getLogger(MavenRuleFrontend.class.getName()).log(Level.SEVERE, null, ex);
        }
        


    }//GEN-LAST:event_DBConnButtonActionPerformed

    private void LabResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LabResultActionPerformed
        this.setEnabled(false);
           LabResult n = new LabResult(this);
           n.setVisible(true);
    }//GEN-LAST:event_LabResultActionPerformed

    private void EditOnDoubleClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditOnDoubleClick
        if (evt.getClickCount() >=2){
            EditButtonActionPerformed(null);
        }
    }//GEN-LAST:event_EditOnDoubleClick

    private void RuleListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RuleListMouseClicked
        if (evt.getClickCount()>=2){
            EditRuleButtonActionPerformed(null);
        }
    }//GEN-LAST:event_RuleListMouseClicked

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
      
        try {
            Class.forName("org.postgresql.Driver");
            org.postgresql.Driver PSQLDriver = new org.postgresql.Driver();
            String url = "jdbc:postgresql://23.251.149.125/maven";
            Properties props = new Properties();
            props.setProperty("user", "maven");
            props.setProperty("password", "mavendevel");
            
            Connection con = PSQLDriver.connect(url, props);
             Statement stmt = con.createStatement();
            for (String s:deleteList){
                  
                stmt.executeUpdate("delete from sleuth_rule where name='" + s+"';");
            }
            
            deleteList.clear();
            for (Rule r:this.myModel.Rules){
               
                if (!r.generateSQL().isEmpty()){
                    
                    System.out.println("logging: sending SQL query: " + "delete from sleuth_rule where name='" + r.getName()+"'; to " + url);
                    stmt.executeUpdate("delete from sleuth_rule where name='" + r.getName()+"';");
                    System.out.println("logging: sending SQL query: " + r.generateSQL() + " to " + url);
                    stmt.executeUpdate(r.generateSQL());
                }
                
            }
            stmt.close();
            con.close();
            
        } catch (Exception ex) {
            Logger.getLogger(MavenRuleFrontend.class.getName()).log(Level.SEVERE, null, ex);
        }
      
    
    }//GEN-LAST:event_UpdateButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MavenRuleFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MavenRuleFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MavenRuleFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MavenRuleFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MavenRuleFrontend().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AgeMax;
    private javax.swing.JTextField AgeMin;
    private javax.swing.JTextArea CommentField;
    private javax.swing.JButton CreateButton;
    private javax.swing.JButton DBConnButton;
    private javax.swing.JTextField DBNameField;
    private javax.swing.JButton DeleteRuleButton;
    private javax.swing.JList DetailList;
    private javax.swing.JScrollPane DetailsList;
    private javax.swing.JPanel DetailsPanel;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton EditRuleButton;
    private javax.swing.JPanel EditorPanel;
    private javax.swing.JButton EncounterProbListButton;
    private javax.swing.JButton EncounterProcedureConditionButton;
    private javax.swing.JButton HistoricProcedureConditionButton;
    private javax.swing.JButton LabResult;
    private javax.swing.JButton RemoveDetailButton;
    private javax.swing.JList RuleList;
    private javax.swing.JTextField RuleNameField;
    private javax.swing.JList SexList;
    private javax.swing.JTextField TriggerCode;
    private javax.swing.JComboBox TriggerTypeBox;
    private javax.swing.JLabel TriggerTypeLabel;
    private javax.swing.JButton UpdateButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel whatever;
    // End of variables declaration//GEN-END:variables

    public void recieveDetail(Detail myParent) {
        
        curRule.addDetail(myParent);
        System.out.println("logging: detail recieve from frame, JSON: " +myParent.generateJSONString().toString());
        this.setEnabled(true);
    }

    void hidePanel() {
        this.EditorPanel.setVisible(false);
    } 
}
