var type = module.exports,

    toString = Object.prototype.toString,
    fnToString = Function.prototype.toString,
    hasOwnProperty = Object.prototype.hasOwnProperty,

    HOST_CTOR = /^\[object .+?Constructor\]$/,

    IS_NATIVE = RegExp("^" +
        fnToString.call(toString)
        .replace(/[.*+?^${}()|[\]\/\\]/g, "\\$&")
        .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );


type.isError = function(obj) {

    return toString.call(obj) === "[object Error]";
};

type.isObject = function(obj) {
    var typeStr;

    if (obj === null || obj === undefined) return false;
    typeStr = typeof(obj);

    return (typeStr === "function" || typeStr === "object");
};

type.isHash = function(obj) {
    var typeStr;

    if (obj === null || obj === undefined) return false;
    typeStr = typeof(obj);

    return typeStr === "object" && obj.constructor === Object;
};

type.isArrayLike = function(obj) {

    return obj !== null && typeof(obj) === "object" && (obj.length === +obj.length);
};

type.isArray = Array.isArray || function isArray(obj) {

    return toString.call(obj) === "[object Array]";
};

type.isArguments = function(obj) {

    return toString.call(obj) === "[object Arguments]";
};

if (typeof(/./) !== "function") {
    type.isFunction = function(obj) {

        return typeof(obj) === "function";
    };
} else {
    type.isFunction = function(obj) {

        return toString.call(obj) === "[object Function]";
    };
}

type.isString = function(obj) {
    var type = typeof obj;

    return type === "string" || (obj && type === "object" && toString.call(obj) === "[object String]") || false;
};

type.isNumber = function(obj) {
    var type = typeof(obj);

    return type === "number" || (obj && type === "object" && toString.call(obj) === "[object Number]") || false;
};

type.isFinite = Number.isFinite || function isFinite(obj) {
    return !(
        typeof(obj) !== "number" ||
        (obj !== obj || obj === Infinity || obj === -Infinity) ||
        false
    );
};

type.isNaN = Number.isNaN || function(obj) {

    return type.isNumber(obj) && (obj !== +obj);
};

type.isDecimal = function(obj) {

    return type.isNumber(obj) && obj % 1 !== 0;
};

type.isFloat = type.isDecimal;

type.isInteger = function(obj) {

    return type.isNumber(obj) && obj % 1 === 0;
};

type.isInt = type.isInteger;

type.isDate = function(obj) {

    return toString.call(obj) === "[object Date]";
};

type.isRegExp = function(obj) {

    return toString.call(obj) === "[object RegExp]";
};

type.isBoolean = function(obj) {

    return obj === true || obj === false || toString.call(obj) === "[object Boolean]";
};

type.isNull = function(obj) {

    return obj === null;
};

type.isUndefined = function(obj) {

    return obj === undefined;
};

type.isUndefinedOrNull = function(obj) {

    return obj !== null && obj !== undefined;
};

type.isPrimitive = function(obj) {
    var typeStr = typeof(obj);
    return (obj === undefined || obj === null) || (typeStr !== "object" && typeStr !== "function");
};

type.isNative = function(obj) {
    var typeStr = typeof(obj);

    return typeStr === "function" ?
        IS_NATIVE.test(fnToString.call(obj)) :
        (obj && typeStr === "object" && HOST_CTOR.test(toString.call(obj))) || false;
};

type.isWindow = function(obj) {
    var className = toString.call(obj);

    return className === "[object global]" || className === "[object Window]" || toString === "[object DOMWindow]";
};

type.isDocument = function(obj) {

    return obj && (obj.constructor === Document || obj.constructor === HTMLDocument);
};

type.isElement = function(obj) {

    return obj instanceof Element;
};

type.isElementOrDocument = function(obj) {

    return type.isElement(obj) || type.isDocument(obj);
};

type.isNodeList = function(obj) {

    return obj instanceof NodeList;
};

type.isHTMLElement = function(obj) {

    return obj instanceof HTMLElement;
};
