#sudo yum install kernel-headers kernel-uek

sudo yum install postgresql-server

#truecrypt
sudo truecrypt -t -c /dev/sdc                                                                                                                                                                                                       # enter choices 1, 1, 2, 5, then a good password (feel free to choose "temporary" if in a dev environment)

# mount encrypted partition and initialize the database
#switch to root user
sudo su
truecrypt -t -k "" --protect-hidden=no /dev/sdc ~postgres
cd ~postgres
chown postgres .
chgrp postgres .
su postgres
initdb -D `pwd`/data -A password -W  # prompts for a password
cd data
sed -i.bak -e "s/#listen_addresses = 'localhost'/listen_addresses = '\*'/" -e 's/max_connections = 100/max_connections = 200/' postgresql.conf
exit # exit postgres
# on oracle linux setenforce 0  # hack because selinux is stopping access of user postgres to it's own files for some reason
service postgresql start
exit # exit root

#sudo iptables -A INPUT -s 0.0.0.0/0 -p tcp --destination-port 5432 -j ACCEPT
#sudo service iptables save
#sudo service iptables restart


#Note - on ec2, EBS storage of a truecrypt encrypted partition passed the closest I can get to a "disk pull plug" test.  A single pass doesn't prove much - only that the system isn't horribly broken.  It was also getting around 80 writes/second.  The writes/second matches what happened without truecrypt, so I don't think encryption costs us anything.

